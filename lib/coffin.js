// Generated by CoffeeScript 1.10.0
(function() {
  var CloudFormationTemplateContext, CoffeeScript, fs, path, vm,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  fs = require('fs');

  vm = require('vm');

  path = require('path');

  CoffeeScript = require('coffee-script');

  CloudFormationTemplateContext = (function() {
    function CloudFormationTemplateContext() {
      this.Description = bind(this.Description, this);
      this.Condition = bind(this.Condition, this);
      this.Output = bind(this.Output, this);
      this.Mapping = bind(this.Mapping, this);
      this._resourceByType = bind(this._resourceByType, this);
      this.DeclareResource = bind(this.DeclareResource, this);
      this._buildCall = bind(this._buildCall, this);
      this._paramByType = bind(this._paramByType, this);
      this._resources = {};
      this._parameters = {};
      this._mappings = null;
      this._outputs = {};
      this._description = null;
      this._conditions = null;
      this.Params = {};
      this.Resources = {};
      this.Mappings = {};
      this.Conditions = {};
      this.AWS = {
        AutoScaling: {
          AutoScalingGroup: null,
          LaunchConfiguration: null,
          ScalingPolicy: null,
          LifecycleHook: null,
          ScheduledAction: null,
          Trigger: null
        },
        CloudFormation: {
          Authentication: null,
          CustomResource: null,
          Stack: null,
          WaitCondition: null,
          WaitConditionHandle: null
        },
        CloudFront: {
          Distribution: null
        },
        CloudWatch: {
          Alarm: null
        },
        CodeDeploy: {
          Application: null,
          DeploymentConfig: null,
          DeploymentGroup: null
        },
        CloudTrail: {
          Trail: null
        },
        DataPipeline: {
          Pipeline: null
        },
        DynamoDB: {
          Table: null
        },
        EC2: {
          CustomerGateway: null,
          DHCPOptions: null,
          EIP: null,
          EIPAssociation: null,
          Instance: null,
          InternetGateway: null,
          NetworkAcl: null,
          NetworkAclEntry: null,
          NetworkInterface: null,
          Route: null,
          RouteTable: null,
          SecurityGroup: null,
          SecurityGroupIngress: null,
          SecurityGroupEgress: null,
          Subnet: null,
          SubnetNetworkAclAssociation: null,
          SubnetRouteTableAssociation: null,
          Volume: null,
          VolumeAttachment: null,
          VPC: null,
          VPCDHCPOptionsAssociation: null,
          VPCGatewayAttachment: null,
          VPNConnection: null,
          VPNGateway: null
        },
        ECS: {
          Cluser: null,
          Service: null,
          TaskDefinition: null
        },
        ElastiCache: {
          CacheCluster: null,
          ParameterGroup: null,
          SecurityGroup: null,
          SecurityGroupIngress: null
        },
        ElasticBeanstalk: {
          Application: null,
          ApplicationVersion: null,
          Environment: null,
          ConfigurationTemplate: null
        },
        ElasticLoadBalancing: {
          LoadBalancer: null
        },
        EFS: {
          FileSystem: null,
          MountTarget: null
        },
        IAM: {
          AccessKey: null,
          Group: null,
          InstanceProfile: null,
          Policy: null,
          Role: null,
          User: null,
          UserToGroupAddition: null
        },
        Kinesis: {
          Stream: null
        },
        Logs: {
          LogGroup: null,
          MetricFilter: null
        },
        Lambda: {
          Function: null,
          Permission: null,
          EventSourceMapping: null
        },
        OpsWorks: {
          App: null,
          Instance: null,
          Layer: null,
          Stack: null
        },
        Redshift: {
          Cluster: null,
          ClusterParameterGroup: null,
          ClusterSecurityGroup: null,
          ClusterSubnetGroup: null
        },
        RDS: {
          DBInstance: null,
          DBParameterGroup: null,
          DBSubnetGroup: null,
          DBSecurityGroup: null,
          DBSecurityGroupIngress: null
        },
        Route53: {
          RecordSet: null,
          RecordSetGroup: null,
          HostedZone: null,
          HealthCheck: null
        },
        SDB: {
          Domain: null
        },
        S3: {
          Bucket: null,
          BucketPolicy: null
        },
        SNS: {
          Topic: null,
          TopicPolicy: null
        },
        SQS: {
          Queue: null,
          QueuePolicy: null
        }
      };
      this.Param = {
        String: (function(_this) {
          return function(name, arg1, arg2) {
            return _this._paramByType('String', name, arg1, arg2);
          };
        })(this),
        Number: (function(_this) {
          return function(name, arg1, arg2) {
            return _this._paramByType('Number', name, arg1, arg2);
          };
        })(this),
        CommaDelimitedList: (function(_this) {
          return function(name, arg1, arg2) {
            return _this._paramByType('CommaDelimitedList', name, arg1, arg2);
          };
        })(this),
        AWS: (function(_this) {
          return function(type, name, arg1, arg2) {
            return _this._paramByType("AWS::" + type, name, arg1, arg2);
          };
        })(this),
        AWSList: (function(_this) {
          return function(type, name, arg1, arg2) {
            return _this._paramByType("List<" + type + ">", name, arg1, arg2);
          };
        })(this)
      };
      this._buildCall(null, null, 'AWS', this.AWS);
    }

    CloudFormationTemplateContext.prototype._paramByType = function(type, name, arg1, arg2) {
      var result;
      result = {};
      if (arg1 == null) {
        result[name] = {};
      } else if (arg2 == null) {
        result[name] = typeof arg1 === 'string' ? {
          Description: arg1
        } : arg1;
      } else {
        result[name] = arg2;
        result[name].Description = arg1;
      }
      result[name].Type = type;
      this._set(result, this._parameters);
      return this.Params[name] = {
        Ref: name
      };
    };

    CloudFormationTemplateContext.prototype._buildCall = function(parent, lastKey, awsType, leaf) {
      var key, val;
      if (leaf != null) {
        for (key in leaf) {
          val = leaf[key];
          this._buildCall(leaf, key, awsType + "::" + key, val);
        }
        return;
      }
      return parent[lastKey] = (function(_this) {
        return function(name, props) {
          return _this._resourceByType(awsType, name, props);
        };
      })(this);
    };

    CloudFormationTemplateContext.prototype.DeclareResource = function(name) {
      var base;
      return (base = this.Resources)[name] != null ? base[name] : base[name] = {
        Ref: name
      };
    };

    CloudFormationTemplateContext.prototype._resourceByType = function(type, name, props) {
      var result;
      result = {};
      if (((props != null ? props.Metadata : void 0) != null) || ((props != null ? props.Properties : void 0) != null) || ((props != null ? props.DependsOn : void 0) != null) || ((props != null ? props.UpdatePolicy : void 0) != null) || ((props != null ? props.CreationPolicy : void 0) != null) || ((props != null ? props.Condition : void 0) != null)) {
        result[name] = props;
        result[name].Type = type;
      } else {
        result[name] = {
          Type: type,
          Properties: props
        };
      }
      this._set(result, this._resources);
      return this.DeclareResource(name);
    };

    CloudFormationTemplateContext.prototype._set = function(source, target) {
      var key, results, val;
      results = [];
      for (key in source) {
        val = source[key];
        results.push(target[key] = val);
      }
      return results;
    };

    CloudFormationTemplateContext.prototype.Mapping = function(name, map) {
      var result;
      if (this._mappings == null) {
        this._mappings = {};
      }
      result = {};
      result[name] = map;
      return this._set(result, this._mappings);
    };

    CloudFormationTemplateContext.prototype.Output = function() {
      var args, name, result;
      name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      result = {};
      if (args.length === 1) {
        result[name] = {
          Value: args[0]
        };
      }
      if (args.length === 2) {
        result[name] = {
          Description: args[0],
          Value: args[1]
        };
      }
      return this._set(result, this._outputs);
    };

    CloudFormationTemplateContext.prototype.Condition = function(name, intrinsicfn) {
      var result;
      if (this._conditions == null) {
        this._conditions = {};
      }
      result = {};
      result[name] = intrinsicfn;
      return this._set(result, this._conditions);
    };

    CloudFormationTemplateContext.prototype.Description = function(d) {
      return this._description = d;
    };

    CloudFormationTemplateContext.prototype.Tag = function(key, val) {
      return {
        Key: key,
        Value: val
      };
    };

    CloudFormationTemplateContext.prototype.Join = function() {
      var args, delimiter;
      delimiter = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (args.length === 1 && (args[0] instanceof Array)) {
        return {
          'Fn::Join': [delimiter, args[0]]
        };
      } else {
        return {
          'Fn::Join': [delimiter, args]
        };
      }
    };

    CloudFormationTemplateContext.prototype.FindInMap = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return {
        'Fn::FindInMap': args
      };
    };

    CloudFormationTemplateContext.prototype.GetAtt = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return {
        'Fn::GetAtt': args
      };
    };

    CloudFormationTemplateContext.prototype.Base64 = function(arg) {
      return {
        'Fn::Base64': arg
      };
    };

    CloudFormationTemplateContext.prototype.GetAZs = function(arg) {
      return {
        'Fn::GetAZs': arg
      };
    };

    CloudFormationTemplateContext.prototype.Select = function() {
      var args, index;
      index = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (args.length === 1 && (args[0] instanceof Array)) {
        return {
          'Fn::Select': [index, args[0]]
        };
      } else {
        return {
          'Fn::Select': [index, args]
        };
      }
    };

    CloudFormationTemplateContext.prototype.And = function() {
      var condition, conditions;
      condition = arguments[0], conditions = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (conditions.length === 1 && (conditions[0] instanceof Array)) {
        return {
          'Fn::And': [condition, conditions[0]]
        };
      } else {
        return {
          'Fn::And': [condition, conditions]
        };
      }
    };

    CloudFormationTemplateContext.prototype.Equals = function(value_1, value_2) {
      return {
        'Fn::Equals': [value_1, value_2]
      };
    };

    CloudFormationTemplateContext.prototype.If = function(condition, value_if_true, value_if_false) {
      return {
        'Fn::If': [condition, value_if_true, value_if_false]
      };
    };

    CloudFormationTemplateContext.prototype.Not = function(condition) {
      return {
        'Fn::Not': [condition]
      };
    };

    CloudFormationTemplateContext.prototype.Or = function() {
      var condition, conditions;
      condition = arguments[0], conditions = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (conditions.length === 1 && (conditions[0] instanceof Array)) {
        return {
          'Fn::Or': [condition, conditions[0]]
        };
      } else {
        return {
          'Fn::Or': [condition, conditions]
        };
      }
    };

    CloudFormationTemplateContext.prototype.AccountId = {
      Ref: 'AWS::AccountId'
    };

    CloudFormationTemplateContext.prototype.NotificationARNs = {
      Ref: 'AWS::NotificationARNs'
    };

    CloudFormationTemplateContext.prototype.NoValue = {
      Ref: 'AWS::NoValue'
    };

    CloudFormationTemplateContext.prototype.Region = {
      Ref: 'AWS::Region'
    };

    CloudFormationTemplateContext.prototype.StackId = {
      Ref: 'AWS::StackId'
    };

    CloudFormationTemplateContext.prototype.StackName = {
      Ref: 'AWS::StackName'
    };

    CloudFormationTemplateContext.prototype.InitScript = function(arg) {
      var chunks, compiled, existsSyncFunc, match, pattern, text;
      existsSyncFunc = fs.existsSync != null ? fs.existsSync : path.existsSync;
      if (!existsSyncFunc(arg)) {
        text = arg;
      } else {
        text = fs.readFileSync(arg).toString();
      }
      chunks = [];
      pattern = /((.|\n)*?)%{([^}?]+)}?((.|\n)*)/;
      match = text.match(pattern);
      while (match) {
        chunks.push(match[1]);
        compiled = CoffeeScript.compile(match[3], {
          bare: true
        });
        chunks.push(eval(compiled));
        text = match[4];
        match = text.match(pattern);
      }
      if (text && text.length > 0) {
        chunks.push(text);
      }
      return this.Base64(this.Join('', chunks));
    };

    return CloudFormationTemplateContext;

  })();

  module.exports.CloudFormationTemplateContext = CloudFormationTemplateContext;

  module.exports = function(func) {
    var context, template;
    context = new CloudFormationTemplateContext;
    func.apply(context, [context]);
    template = {
      AWSTemplateFormatVersion: '2010-09-09'
    };
    if (context._description != null) {
      template.Description = context._description;
    }
    template.Parameters = context._parameters;
    if (context._mappings != null) {
      template.Mappings = context._mappings;
    }
    template.Resources = context._resources;
    template.Outputs = context._outputs;
    if (context._conditions != null) {
      template.Conditions = context._conditions;
    }
    return template;
  };

  require('pkginfo')(module, 'version');

}).call(this);
